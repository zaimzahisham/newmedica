import pytest
import pytest_asyncio
from httpx import AsyncClient, ASGITransport
import uuid

from app.main import app

# Use a function-scoped fixture to ensure a clean client for each test
@pytest_asyncio.fixture(scope="function")
async def async_client():
    async with AsyncClient(transport=ASGITransport(app=app), base_url="http://test") as client:
        yield client

@pytest.mark.asyncio
async def test_user_registration_and_login(async_client: AsyncClient):
    # Generate unique credentials for this test run
    unique_email = f"test_user_{uuid.uuid4()}@example.com"
    password = "SecurePassword123!"

    print(f"Attempting to register user: {unique_email}")
    # Step 1: Register the user
    register_response = await async_client.post(
        "/api/v1/auth/register",
        json={
            "email": unique_email,
            "password": password,
            "userType": "Basic",
            "extra_fields": {}
        }
    )
    print(f"Registration response status: {register_response.status_code}")
    print(f"Registration response body: {register_response.text}")

    assert register_response.status_code == 201, f"Registration failed: {register_response.text}"
    register_data = register_response.json()
    assert register_data["email"] == unique_email
    assert "id" in register_data

    print(f"Registration successful. Attempting to log in user: {unique_email}")
    # Step 2: Attempt to log in with the newly registered user
    login_response = await async_client.post(
        "/api/v1/auth/login",
        data={"username": unique_email, "password": password}
    )
    print(f"Login response status: {login_response.status_code}")
    print(f"Login response body: {login_response.text}")

    assert login_response.status_code == 200, f"Login failed: {login_response.text}"
    token_data = login_response.json()
    assert "access_token" in token_data
    assert token_data["token_type"] == "bearer"
    print("Login successful. Test passed.")